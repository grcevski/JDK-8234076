--- old/test/jdk/tools/launcher/Arrrghs.java	2019-12-02 13:16:32.100779600 -0500
+++ new/test/jdk/tools/launcher/Arrrghs.java	2019-12-02 13:16:31.496240100 -0500
@@ -25,6 +25,7 @@
  * @test
  * @bug 5030233 6214916 6356475 6571029 6684582 6742159 4459600 6758881 6753938
  *      6894719 6968053 7151434 7146424 8007333 8077822 8143640 8132379 8218547
+ *      8234076
  * @summary Argument parsing validation.
  * @modules jdk.compiler
  *          jdk.zipfs
@@ -637,6 +638,115 @@
             System.out.println(tr);
     }
 
+    private void initModulesDir(File modulesDir) throws IOException {
+        if (modulesDir.exists()) {
+            recursiveDelete(modulesDir);
+        }
+
+        modulesDir.mkdirs();
+        File srcDir = new File(modulesDir, "src");
+        File modsDir = new File(modulesDir, "mods");
+        File testDir = new File(srcDir, "test");
+        File launcherTestDir = new File(testDir, "launcher");
+        srcDir.mkdir();
+        modsDir.mkdir();
+        testDir.mkdir();
+        launcherTestDir.mkdir();
+
+        ArrayList<String> scratchpad = new ArrayList<>();
+        scratchpad.add("module test {}");
+        createFile(new File(testDir, "module-info.java"), scratchpad);
+
+        scratchpad.clear();
+        scratchpad.add("package launcher;");
+        scratchpad.add("import java.util.Arrays;");
+        scratchpad.add("public class Main {");
+        scratchpad.add("public static void main(String[] args) {");
+        scratchpad.add("System.out.println(Arrays.toString(args));");
+        scratchpad.add("}");
+        scratchpad.add("}");
+        createFile(new File(launcherTestDir, "Main.java"), scratchpad);
+    }
+
+    /*
+     * These tests are not expected to work on *nixes, and are ignored.
+     */
+    @Test
+    void testForNegativeArgumentIndex() throws IOException {
+        if (!isWindows)
+            return;
+        File cwd = new File(".");
+        File testModuleDir = new File(cwd, "modules_test");
+        initModulesDir(testModuleDir);
+
+        Path SRC_DIR = Paths.get(testModuleDir.getAbsolutePath(), "src");
+        Path MODS_DIR = Paths.get(testModuleDir.getAbsolutePath(), "mods");
+    
+        // test module / main class
+        String TEST_MODULE = "test";
+    
+        // javac -d mods/test src/test/**
+        TestResult tr = doExec(
+            javacCmd, 
+            "-d", MODS_DIR.toString(), 
+            "--module-source-path", SRC_DIR.toString(),
+            "--module", TEST_MODULE);
+
+        if (!tr.isOK()) {
+            System.out.println("test did not compile");
+            throw new RuntimeException("Error: modules test did not compile");
+        }
+
+        Map<String, String> env = new HashMap<>();
+        env.put(JLDEBUG_KEY, "true");
+
+        // Run with unsupported module command line option
+        tr = doExec(
+            env, 
+            javaCmd, 
+            "--module-path=" + MODS_DIR.toString(), 
+            "--module=test/launcher.Main", 
+            "--help"
+        );
+
+        // There will be no known application arguments
+        tr.contains("Warning: first app arg index not found, -1");
+        if (!tr.testStatus) {
+            System.out.println("Error: Didn't find arg index of -1");
+            System.out.println(tr);
+        }
+
+        // There will be no argument expansion performed
+        tr.notContains("F--help");
+        if (!tr.testStatus) {
+            System.out.println("Error: Somehow we processed application arguments, not expecting to see F--help");
+            System.out.println(tr);
+        }
+
+        // Run with the supported module command line option
+        tr = doExec(
+            env, 
+            javaCmd, 
+            "--module-path=" + MODS_DIR.toString(), 
+            "--module", "test/launcher.Main", 
+            "--help"
+        );
+
+        // We should find argument index
+        tr.contains("AppArgIndex: 4 points to --help");
+        if (!tr.testStatus) {
+            System.out.println("Error: Didn't find app arg index of 4 pointing to --help");
+            System.out.println(tr);
+        }
+        
+        // We should do proper argument expansion
+        tr.contains("F--help");
+        if (!tr.testStatus) {
+            System.out.println("Error: Didn't process application arguments properly, expecting to see F--help");
+            System.out.println(tr);
+        }
+    }
+
     /**
      * @param args the command line arguments
      * @throws java.io.FileNotFoundException
